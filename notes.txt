1. It would be very nice to have an __assign__ dunder method on classes.
   While this is not possible on the global scope, I don't really need it in the global scope either.
   I need it in locals(), and apparently that's possible through some black magic:

   https://stackoverflow.com/questions/11024646/is-it-possible-to-overload-python-assignment

   Using the top-level namespace, this is impossible. When you run

   var = 1
   
   It stores the key var and the value 1 in the global dictionary.
   It is roughly equivalent to calling globals().__setitem__('var', 1).
   The problem is that you cannot replace the global dictionary in a
   running script (you probably can by messing with the stack, but
   that is not a good idea). However you can execute code in a secondary
   namespace, and provide a custom dictionary for its globals.

   class myglobals(dict):
       def __setitem__(self, key, value):
           if key=='val':
               raise TypeError()
           dict.__setitem__(self, key, value)

   myg = myglobals()
   dict.__setitem__(myg, 'val', 'protected')

   import code
   code.InteractiveConsole(locals=myg).interact()
   
   That will fire up a REPL which almost operates normally, but refuses 
   any attempts to set the variable val. You could also use 
   execfile(filename, myg). Note this doesn't protect against malicious code.

   There's another way to black-magic support into Python:

   https://github.com/RyanKung/assign

   This one overrides import behavior and patches up the AST as it seems.

   This later one doesn't seem to work all too well even though its API is what I expect it to be.


2. For formal verification, we need a 'SAT' solver, or something. There's a Python library for that:
   https://pypi.org/project/python-sat/
   General info: https://en.wikipedia.org/wiki/Boolean_satisfiability_problem
   Open-source formal toolset: http://www.clifford.at/yosys/files/yosys_manual.pdf
   Lots of formal examples: https://zipcpu.com/
   Another intro to formal: https://www.systemverilog.io/gentle-introduction-to-formal-verification

